"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/team/[id]/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCompetitions: () => (/* binding */ getCompetitions),\n/* harmony export */   getLastMatches: () => (/* binding */ getLastMatches),\n/* harmony export */   getNextMatches: () => (/* binding */ getNextMatches),\n/* harmony export */   getTeamInfo: () => (/* binding */ getTeamInfo),\n/* harmony export */   getTeamPlayers: () => (/* binding */ getTeamPlayers),\n/* harmony export */   getTeams: () => (/* binding */ getTeams)\n/* harmony export */ });\n// lib/api.ts\n// Utilisé par le front : appelle ton backend Next.js (app/api/...)\nasync function fetchJson(url, opts) {\n    const res = await fetch(url, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        ...opts\n    });\n    if (!res.ok) {\n        const text = await res.text().catch(()=>'');\n        throw new Error(\"Fetch error \".concat(res.status, \" \").concat(res.statusText, \" — \").concat(text));\n    }\n    return await res.json();\n}\n/**\n * Récupère la liste des compétitions via ton backend\n * Backend endpoint attendu : GET /api/competitions\n */ const getCompetitions = async ()=>{\n    return fetchJson('/api/competitions');\n};\n/**\n * Récupère les équipes d'une compétition via ton backend\n * Backend endpoint attendu : GET /api/teams/[competitionId]\n */ const getTeams = async (competitionId)=>{\n    return fetchJson(\"/api/teams/\".concat(competitionId));\n};\n/**\n * Récupère les derniers matchs d'une équipe via ton backend\n * Backend endpoint attendu : GET /api/teams/matches/[teamId]\n */ const getLastMatches = async (teamId)=>{\n    return fetchJson(\"/api/teams/matches/\".concat(teamId));\n};\n/**\n * Si tu veux récupérer les prochains matchs : soit ton backend gère un param type/ status,\n * soit tu crées un endpoint dédié. Exemple ci‑dessous en utilisant query param 'type=next'.\n *\n * Backend attendu : GET /api/teams/matches/[teamId]?type=next\n */ const getNextMatches = async (teamId)=>{\n    return fetchJson(\"/api/teams/matches/\".concat(teamId, \"?type=next\"));\n};\n/**\n * (Optionnel) Récupérer les infos d'une équipe si ton backend propose un endpoint dédié\n * Ex: GET /api/teams/info/[teamId]\n */ const getTeamInfo = async (teamId)=>{\n    return fetchJson(\"/api/teams/info/\".concat(teamId));\n};\n// export const getTeamPlayers = async (teamId: number): Promise<Player[]> => {\n//   const res = await fetchJson<any>(`/api/teams/players/${teamId}`)\n//   // Certains endpoints renvoient { squad: [...] } ou { players: [...] }\n//   if (Array.isArray(res)) return res\n//   if (res.players && Array.isArray(res.players)) return res.players\n//   if (res.squad && Array.isArray(res.squad)) return res.squad\n//   return []\n// }\nconst getTeamPlayers = async (teamId)=>{\n    const res = await fetchJson(\"/api/teams/players/\".concat(teamId));\n    // Certains endpoints renvoient { squad: [...] } ou { players: [...] }\n    if (Array.isArray(res)) return res;\n    if (res.players && Array.isArray(res.players)) return res.players;\n    if (res.squad && Array.isArray(res.squad)) return res.squad;\n    return [];\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsYUFBYTtBQUNiLG1FQUFtRTtBQWtDbkUsZUFBZUEsVUFBbUJDLEdBQVcsRUFBRUMsSUFBa0I7SUFDL0QsTUFBTUMsTUFBTSxNQUFNQyxNQUFNSCxLQUFLO1FBQzNCSSxTQUFTO1lBQUUsZ0JBQWdCO1FBQW1CO1FBQzlDLEdBQUdILElBQUk7SUFDVDtJQUVBLElBQUksQ0FBQ0MsSUFBSUcsRUFBRSxFQUFFO1FBQ1gsTUFBTUMsT0FBTyxNQUFNSixJQUFJSSxJQUFJLEdBQUdDLEtBQUssQ0FBQyxJQUFNO1FBQzFDLE1BQU0sSUFBSUMsTUFBTSxlQUE2Qk4sT0FBZEEsSUFBSU8sTUFBTSxFQUFDLEtBQXVCSCxPQUFwQkosSUFBSVEsVUFBVSxFQUFDLE9BQVUsT0FBTEo7SUFDbkU7SUFFQSxPQUFRLE1BQU1KLElBQUlTLElBQUk7QUFDeEI7QUFFQTs7O0NBR0MsR0FDTSxNQUFNQyxrQkFBa0I7SUFDN0IsT0FBT2IsVUFBeUI7QUFDbEMsRUFBQztBQUVEOzs7Q0FHQyxHQUNNLE1BQU1jLFdBQVcsT0FBT0M7SUFDN0IsT0FBT2YsVUFBa0IsY0FBNEIsT0FBZGU7QUFDekMsRUFBQztBQUVEOzs7Q0FHQyxHQUNNLE1BQU1DLGlCQUFpQixPQUFPQztJQUNuQyxPQUFPakIsVUFBbUIsc0JBQTZCLE9BQVBpQjtBQUNsRCxFQUFDO0FBRUQ7Ozs7O0NBS0MsR0FDTSxNQUFNQyxpQkFBaUIsT0FBT0Q7SUFDbkMsT0FBT2pCLFVBQW1CLHNCQUE2QixPQUFQaUIsUUFBTztBQUN6RCxFQUFDO0FBRUQ7OztDQUdDLEdBQ00sTUFBTUUsY0FBYyxPQUFPRjtJQUNoQyxPQUFPakIsVUFBZ0IsbUJBQTBCLE9BQVBpQjtBQUM1QyxFQUFDO0FBRUQsK0VBQStFO0FBQy9FLHFFQUFxRTtBQUNyRSwyRUFBMkU7QUFDM0UsdUNBQXVDO0FBQ3ZDLHNFQUFzRTtBQUN0RSxnRUFBZ0U7QUFDaEUsY0FBYztBQUNkLElBQUk7QUFDRyxNQUFNRyxpQkFBaUIsT0FBT0g7SUFDbkMsTUFBTWQsTUFBTSxNQUFNSCxVQUFlLHNCQUE2QixPQUFQaUI7SUFDdkQsc0VBQXNFO0lBQ3RFLElBQUlJLE1BQU1DLE9BQU8sQ0FBQ25CLE1BQU0sT0FBT0E7SUFDL0IsSUFBSUEsSUFBSW9CLE9BQU8sSUFBSUYsTUFBTUMsT0FBTyxDQUFDbkIsSUFBSW9CLE9BQU8sR0FBRyxPQUFPcEIsSUFBSW9CLE9BQU87SUFDakUsSUFBSXBCLElBQUlxQixLQUFLLElBQUlILE1BQU1DLE9BQU8sQ0FBQ25CLElBQUlxQixLQUFLLEdBQUcsT0FBT3JCLElBQUlxQixLQUFLO0lBQzNELE9BQU8sRUFBRTtBQUNYLEVBQUMiLCJzb3VyY2VzIjpbIkQ6XFxkZXZcXERldlByb2plY3RcXFByb2plY3RzX1Rlc3RcXEZhblpvbmVcXGxpYlxcYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9hcGkudHNcbi8vIFV0aWxpc8OpIHBhciBsZSBmcm9udCA6IGFwcGVsbGUgdG9uIGJhY2tlbmQgTmV4dC5qcyAoYXBwL2FwaS8uLi4pXG5leHBvcnQgdHlwZSBDb21wZXRpdGlvbiA9IHtcbiAgaWQ6IG51bWJlclxuICBuYW1lOiBzdHJpbmdcbiAgYXJlYT86IHsgbmFtZTogc3RyaW5nIH1cbiAgW2s6IHN0cmluZ106IGFueVxufVxuXG5leHBvcnQgdHlwZSBUZWFtID0ge1xuICBpZDogbnVtYmVyXG4gIG5hbWU6IHN0cmluZ1xuICBjcmVzdD86IHN0cmluZ1xuICBbazogc3RyaW5nXTogYW55XG59XG5cbmV4cG9ydCB0eXBlIE1hdGNoID0ge1xuICBpZD86IG51bWJlclxuICB1dGNEYXRlPzogc3RyaW5nXG4gIGhvbWVUZWFtPzogeyBpZDogbnVtYmVyOyBuYW1lOiBzdHJpbmcgfVxuICBhd2F5VGVhbT86IHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nIH1cbiAgc2NvcmU/OiBhbnlcbiAgW2s6IHN0cmluZ106IGFueVxufVxuXG5leHBvcnQgdHlwZSBQbGF5ZXIgPSB7IFxuICBpZD86IG51bWJlcjsgXG4gIG5hbWU6IHN0cmluZzsgXG4gIHBvc2l0aW9uPzogc3RyaW5nOyBcbiAgbmF0aW9uYWxpdHk/OiBzdHJpbmc7IFxuICBkYXRlT2ZCaXJ0aD86IHN0cmluZzsgXG4gIFtrOiBzdHJpbmddOiBhbnkgXG59XG5cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hKc29uPFQgPSBhbnk+KHVybDogc3RyaW5nLCBvcHRzPzogUmVxdWVzdEluaXQpOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgLi4ub3B0cyxcbiAgfSlcblxuICBpZiAoIXJlcy5vaykge1xuICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpLmNhdGNoKCgpID0+ICcnKVxuICAgIHRocm93IG5ldyBFcnJvcihgRmV0Y2ggZXJyb3IgJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fSDigJQgJHt0ZXh0fWApXG4gIH1cblxuICByZXR1cm4gKGF3YWl0IHJlcy5qc29uKCkpIGFzIFRcbn1cblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxhIGxpc3RlIGRlcyBjb21ww6l0aXRpb25zIHZpYSB0b24gYmFja2VuZFxuICogQmFja2VuZCBlbmRwb2ludCBhdHRlbmR1IDogR0VUIC9hcGkvY29tcGV0aXRpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb21wZXRpdGlvbnMgPSBhc3luYyAoKTogUHJvbWlzZTxDb21wZXRpdGlvbltdPiA9PiB7XG4gIHJldHVybiBmZXRjaEpzb248Q29tcGV0aXRpb25bXT4oJy9hcGkvY29tcGV0aXRpb25zJylcbn1cblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxlcyDDqXF1aXBlcyBkJ3VuZSBjb21ww6l0aXRpb24gdmlhIHRvbiBiYWNrZW5kXG4gKiBCYWNrZW5kIGVuZHBvaW50IGF0dGVuZHUgOiBHRVQgL2FwaS90ZWFtcy9bY29tcGV0aXRpb25JZF1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRlYW1zID0gYXN5bmMgKGNvbXBldGl0aW9uSWQ6IG51bWJlcik6IFByb21pc2U8VGVhbVtdPiA9PiB7XG4gIHJldHVybiBmZXRjaEpzb248VGVhbVtdPihgL2FwaS90ZWFtcy8ke2NvbXBldGl0aW9uSWR9YClcbn1cblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxlcyBkZXJuaWVycyBtYXRjaHMgZCd1bmUgw6lxdWlwZSB2aWEgdG9uIGJhY2tlbmRcbiAqIEJhY2tlbmQgZW5kcG9pbnQgYXR0ZW5kdSA6IEdFVCAvYXBpL3RlYW1zL21hdGNoZXMvW3RlYW1JZF1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldExhc3RNYXRjaGVzID0gYXN5bmMgKHRlYW1JZDogbnVtYmVyKTogUHJvbWlzZTxNYXRjaFtdPiA9PiB7XG4gIHJldHVybiBmZXRjaEpzb248TWF0Y2hbXT4oYC9hcGkvdGVhbXMvbWF0Y2hlcy8ke3RlYW1JZH1gKVxufVxuXG4vKipcbiAqIFNpIHR1IHZldXggcsOpY3Vww6lyZXIgbGVzIHByb2NoYWlucyBtYXRjaHMgOiBzb2l0IHRvbiBiYWNrZW5kIGfDqHJlIHVuIHBhcmFtIHR5cGUvIHN0YXR1cyxcbiAqIHNvaXQgdHUgY3LDqWVzIHVuIGVuZHBvaW50IGTDqWRpw6kuIEV4ZW1wbGUgY2nigJFkZXNzb3VzIGVuIHV0aWxpc2FudCBxdWVyeSBwYXJhbSAndHlwZT1uZXh0Jy5cbiAqXG4gKiBCYWNrZW5kIGF0dGVuZHUgOiBHRVQgL2FwaS90ZWFtcy9tYXRjaGVzL1t0ZWFtSWRdP3R5cGU9bmV4dFxuICovXG5leHBvcnQgY29uc3QgZ2V0TmV4dE1hdGNoZXMgPSBhc3luYyAodGVhbUlkOiBudW1iZXIpOiBQcm9taXNlPE1hdGNoW10+ID0+IHtcbiAgcmV0dXJuIGZldGNoSnNvbjxNYXRjaFtdPihgL2FwaS90ZWFtcy9tYXRjaGVzLyR7dGVhbUlkfT90eXBlPW5leHRgKVxufVxuXG4vKipcbiAqIChPcHRpb25uZWwpIFLDqWN1cMOpcmVyIGxlcyBpbmZvcyBkJ3VuZSDDqXF1aXBlIHNpIHRvbiBiYWNrZW5kIHByb3Bvc2UgdW4gZW5kcG9pbnQgZMOpZGnDqVxuICogRXg6IEdFVCAvYXBpL3RlYW1zL2luZm8vW3RlYW1JZF1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRlYW1JbmZvID0gYXN5bmMgKHRlYW1JZDogbnVtYmVyKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgcmV0dXJuIGZldGNoSnNvbjxUZWFtPihgL2FwaS90ZWFtcy9pbmZvLyR7dGVhbUlkfWApXG59XG5cbi8vIGV4cG9ydCBjb25zdCBnZXRUZWFtUGxheWVycyA9IGFzeW5jICh0ZWFtSWQ6IG51bWJlcik6IFByb21pc2U8UGxheWVyW10+ID0+IHtcbi8vICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2hKc29uPGFueT4oYC9hcGkvdGVhbXMvcGxheWVycy8ke3RlYW1JZH1gKVxuLy8gICAvLyBDZXJ0YWlucyBlbmRwb2ludHMgcmVudm9pZW50IHsgc3F1YWQ6IFsuLi5dIH0gb3UgeyBwbGF5ZXJzOiBbLi4uXSB9XG4vLyAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcbi8vICAgaWYgKHJlcy5wbGF5ZXJzICYmIEFycmF5LmlzQXJyYXkocmVzLnBsYXllcnMpKSByZXR1cm4gcmVzLnBsYXllcnNcbi8vICAgaWYgKHJlcy5zcXVhZCAmJiBBcnJheS5pc0FycmF5KHJlcy5zcXVhZCkpIHJldHVybiByZXMuc3F1YWRcbi8vICAgcmV0dXJuIFtdXG4vLyB9XG5leHBvcnQgY29uc3QgZ2V0VGVhbVBsYXllcnMgPSBhc3luYyAodGVhbUlkOiBudW1iZXIpOiBQcm9taXNlPFBsYXllcltdPiA9PiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoSnNvbjxhbnk+KGAvYXBpL3RlYW1zL3BsYXllcnMvJHt0ZWFtSWR9YClcbiAgLy8gQ2VydGFpbnMgZW5kcG9pbnRzIHJlbnZvaWVudCB7IHNxdWFkOiBbLi4uXSB9IG91IHsgcGxheWVyczogWy4uLl0gfVxuICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzXG4gIGlmIChyZXMucGxheWVycyAmJiBBcnJheS5pc0FycmF5KHJlcy5wbGF5ZXJzKSkgcmV0dXJuIHJlcy5wbGF5ZXJzXG4gIGlmIChyZXMuc3F1YWQgJiYgQXJyYXkuaXNBcnJheShyZXMuc3F1YWQpKSByZXR1cm4gcmVzLnNxdWFkXG4gIHJldHVybiBbXVxufVxuXG5cbiJdLCJuYW1lcyI6WyJmZXRjaEpzb24iLCJ1cmwiLCJvcHRzIiwicmVzIiwiZmV0Y2giLCJoZWFkZXJzIiwib2siLCJ0ZXh0IiwiY2F0Y2giLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwiZ2V0Q29tcGV0aXRpb25zIiwiZ2V0VGVhbXMiLCJjb21wZXRpdGlvbklkIiwiZ2V0TGFzdE1hdGNoZXMiLCJ0ZWFtSWQiLCJnZXROZXh0TWF0Y2hlcyIsImdldFRlYW1JbmZvIiwiZ2V0VGVhbVBsYXllcnMiLCJBcnJheSIsImlzQXJyYXkiLCJwbGF5ZXJzIiwic3F1YWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});